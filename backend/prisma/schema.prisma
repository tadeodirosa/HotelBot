generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RoomType {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  capacity    Int
  basePrice   Decimal   @map("base_price") @db.Decimal(10, 2)
  description String?
  amenities   Json      @default("[]")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  rooms       Room[]

  @@index([name])
  @@map("room_types")
}

model Room {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(50)
  roomTypeId   Int           @map("room_type_id")
  floor        Int?
  status       RoomStatus    @default(AVAILABLE)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")
  reservations Reservation[]
  roomType     RoomType      @relation(fields: [roomTypeId], references: [id])

  @@index([roomTypeId, status])
  @@map("rooms")
}

model Customer {
  id           Int                   @id @default(autoincrement())
  firstName    String                @map("first_name") @db.VarChar(100)
  lastName     String                @map("last_name") @db.VarChar(100)
  dni          String                @unique @db.VarChar(20)
  email        String                @unique @db.VarChar(255)
  phone        String                @db.VarChar(20)
  dateOfBirth  DateTime?             @map("date_of_birth") @db.Date
  nationality  String?               @db.VarChar(50)
  preferences  Json                  @default("{}")
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  deletedAt    DateTime?             @map("deleted_at")
  reservations CustomerReservation[]

  @@index([email])
  @@index([dni])
  @@map("customers")
}

model MealPlan {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(100)
  description  String
  type         MealPlanType  @default(ROOM_ONLY)
  dailyPrice   Decimal       @map("daily_price") @db.Decimal(8, 2)
  features     Json          @default("[]")
  isActive     Boolean       @default(true) @map("is_active")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  reservations Reservation[]

  @@map("meal_plans")
}

model Reservation {
  id              Int                   @id @default(autoincrement())
  reservationCode String                @unique @map("reservation_code") @db.VarChar(20)
  roomId          Int                   @map("room_id")
  startDate       DateTime              @map("start_date") @db.Date
  endDate         DateTime              @map("end_date") @db.Date
  guestCount      Int                   @map("guest_count")
  mealPlanId      Int?                  @map("meal_plan_id")
  totalAmount     Decimal               @map("total_amount") @db.Decimal(12, 2)
  status          ReservationStatus     @default(PENDING)
  specialRequests Json                  @default("{}") @map("special_requests")
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  cancelledAt     DateTime?             @map("cancelled_at")
  customers       CustomerReservation[]
  mealPlan        MealPlan?             @relation(fields: [mealPlanId], references: [id])
  room            Room                  @relation(fields: [roomId], references: [id])

  @@index([startDate, endDate])
  @@index([status])
  @@map("reservations")
}

model CustomerReservation {
  customerId     Int         @map("customer_id")
  reservationId  Int         @map("reservation_id")
  isPrimaryGuest Boolean     @default(false) @map("is_primary_guest")
  createdAt      DateTime    @default(now()) @map("created_at")
  customer       Customer    @relation(fields: [customerId], references: [id])
  reservation    Reservation @relation(fields: [reservationId], references: [id])

  @@id([customerId, reservationId])
  @@map("customer_reservations")
}

enum MealPlanType {
  ROOM_ONLY
  BREAKFAST
  HALF_BOARD
  FULL_BOARD
  ALL_INCLUSIVE
}

enum RoomStatus {
  AVAILABLE    @map("available")
  OCCUPIED     @map("occupied")
  MAINTENANCE  @map("maintenance")
  OUT_OF_ORDER @map("out_of_order")
}

enum ReservationStatus {
  PENDING   @map("pending")
  CONFIRMED @map("confirmed")
  CANCELLED @map("cancelled")
  COMPLETED @map("completed")
}
